//Author: Abhay Shah
//LinkedIn: https://www.linkedin.com/in/abhay-shah07/

//Question: https://www.codingninjas.com/codestudio/problems/boundary-traversal_790725?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0

bool isLeaf(TreeNode<int> * root) {
  return !root -> left && !root -> right;
}
void addLeft(TreeNode<int>* root,vector<int> &ans){
    TreeNode<int> *curr=root->left;
    while(curr!=NULL){
        if(!isLeaf(curr))
            ans.push_back(curr->data);
        if(curr->left!=NULL)
            curr=curr->left;
        else
            curr=curr->right;
    }
}
void addRight(TreeNode<int>* root,vector<int> &ans){
    TreeNode<int> *curr=root->right;
    vector<int> temp;
    while(curr!=NULL){
        if(!isLeaf(curr))
            temp.push_back(curr->data);
        if(curr->right!=NULL)
            curr=curr->right;
        else
            curr=curr->left;
    }
    for(int i=temp.size()-1;i>=0;i--){
        ans.push_back(temp[i]);
    }
}
void addLeaves(TreeNode<int>* root,vector<int> &ans){
      if (isLeaf(root)) {
        ans.push_back(root -> data);
        return;
      }
      if (root -> left) addLeaves(root -> left, ans);
      if (root -> right) addLeaves(root -> right, ans);
}
vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int> ans;
    if(root==NULL)
        return ans;
    if(!isLeaf(root))
        ans.push_back(root->data);
    addLeft(root,ans);
    addLeaves(root,ans);
    addRight(root,ans);
    return ans;
}