//Author: Abhay Shah
//LinkedIn: https://www.linkedin.com/in/abhay-shah07/

//Question: https://leetcode.com/problems/rotting-oranges/

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>> q;
        int dx[4]={0,1,0,-1};
        int dy[4]={1,0,-1,0};
        int total=0;
        int cnt=0;
        int n=grid.size();
        int m=grid[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]!=0)
                    total++;
                if(grid[i][j]==2){
                    q.push(make_pair(i,j));
                }
            }
        }
        int ans=0;
        while(!q.empty()){
            int k=q.size();
            cnt+=k;
            while(k--){
                int x=q.front().first;
                int y=q.front().second;
                q.pop();
                int alpha=0;
                while(alpha<4){
                    int nx=x+dx[alpha];
                    int ny=y+dy[alpha];
                    if(nx>=0 && ny>=0 && nx<n && ny<m && grid[nx][ny]==1){
                        grid[nx][ny]=2;
                        q.push(make_pair(nx,ny));
                    }
                    alpha++;
                }
            }
            if(!q.empty())
                    ans++;
        }
        if(cnt==total)
            return ans;
        else
            return -1;
    }
};