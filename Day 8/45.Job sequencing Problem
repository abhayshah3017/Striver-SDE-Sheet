//Author: Abhay Shah
//LinkedIn: https://www.linkedin.com/in/abhay-shah07/

//Question: https://practice.geeksforgeeks.org/problems/job-sequencing-problem-1587115620/1#

/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    bool static myComparator(const Job &a,const Job &b){
        return (a.profit > b.profit);
    }
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        vector<int> ans;
        int Pro=0,Job=0;
        int currPr=0,maxDead=0;
        
        sort(arr,arr+n,myComparator);
        
        for(int i=0;i<n;i++){
            maxDead=max(maxDead,arr[i].dead);
        }
        
        int temp[maxDead+1]={0};
        
        for(int i=0;i<n;i++){
            //cout << arr[i].dead << " " << arr[i].profit << "\n"; 
            int j=arr[i].dead;
            while(j>0){
                if(temp[j]==0){
                    Pro+=arr[i].profit;
                    Job++;
                    temp[j]=arr[i].id;
                    break;
                }
                j--;
            }
        }
        ans.push_back(Job);
        ans.push_back(Pro);
        return ans;
    } 
};