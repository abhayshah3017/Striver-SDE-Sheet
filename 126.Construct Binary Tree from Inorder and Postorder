//Author: Abhay Shah
//LinkedIn: https://www.linkedin.com/in/abhay-shah07/

//Question: https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/

TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int> inMap;
        int si=inorder.size();
        for(int i=0;i<inorder.size();i++){
            inMap[inorder[i]]=i;
        }
        TreeNode *root=buildTree(postorder,0,si-1,inMap,inorder,0,si-1);
        return root;
    }
    TreeNode* buildTree(vector<int> &postorder,int postStart,int postEnd,map<int,int> &inMap,vector<int> &inorder,int inStart,int inEnd){
        if(postStart>postEnd || inStart>inEnd)
            return NULL;
        TreeNode *root=new TreeNode(postorder[postEnd]);
        int nodesLeft=inMap[postorder[postEnd]]-inStart;
        root->left=buildTree(postorder,postStart,postStart+nodesLeft-1,inMap,inorder,inStart,inStart+nodesLeft-1);
        root->right=buildTree(postorder,postStart+nodesLeft,postEnd-1,inMap,inorder,inStart+nodesLeft+1,inEnd);
        return root;
}